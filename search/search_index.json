{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout 1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"1 2 3 4 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"fijnstof/blink/","text":"Lampjes knipperen Tot nu toe hebben we de microcontroller code laten uitvoeren en een resultaat terug laten sturen, zou het niet leuker zijn als we ook iets fysieks zien gebeuren? Dit word de eerste stap, tijd om een LED te laten knipperen! Houd je muis boven een term met een gestippelde onderlijning om meer informatie te krijgen De theorie De Raspberry Pico heeft standaard een LED ingebouwd: Locatie van LED op de microcontroller Voordat we deze LED aan en uit kunnen zetten moeten we het concept van Pinnen / een Pin begrijpen. Wat je voor je hebt liggen is meer dan alleen een microcontroller, er zit namelijk een heel board met extra electronica om heen. Alleen de \"grote\" zwarte chip in het midden is de microcontroller, de rest zijn extra's of benodigde elektronische componenten voor bijvoorbeeld de stroom voeding. Op een chip zitten vaak veel pinnetjes, dit zijn vaak in-/uitgangen voor een signaal (zoals het aanzetten van een LEDje) of voor stroom (de + en de -). In de onderstaande afbeelding zijn deze pinnen erg goed te zien. Close-up van een chip Op het microcontroller boardje dat voor je ligt kan je vanuit de chip verschillende lijnen zien lopen naar - bijvoorbeeld - de gouden pinnen aan de zijkant van het board, maar ook naar de LED . De gouden pinnen aan het zijkant van het board maken het makkelijker om te gebruiken, in tegenstelling tot de bijna microscopische pinnen op een chip. Informatie achterhalen Omdat een microcontroller veel verschillende functionaliteiten op de pinnen heeft moeten we goed kijken welke we gaan gebruiken. Veel van deze informatie staat op een \"pin-map\" of \"pinout diagram\". Gelukkig biedt je ontwikkelomgeving zo een diagram aan: Klik CTRL+SHIFT+P, dit opent een \"commando\" scherm in je omgeving, door wat termen te typen die lijken op wat je wilt doen krijg je alle soortgelijke functionaliteiten van je omgeving te zien. Begin met het typen van: \"pico pin map\" of \"pin map\" of \"pico\". Zoals je waarschijnlijk kan zien krijg je een lijst met commandos/functies van je ontwikkelomgeving. Gebruik je muis of de pijltjestoetsen + enter om de juiste functie te selecteren. In dit geval moeten we hebben: Pico-Go > Help > Show Pico Pin Map Commando om de Pin-Map te laten zien Eenmaal geklikt op het juiste commando zul je een nieuwe tabblad krijgen met een pin-diagram van je microcontroller board. Hier staat veel informatie in, maar voor nu zijn we geintereseerd in het bovenste label met: \" LED ( GP25 )\". Raspberry Pico Pin-Map Elk groene label is in de vorm van GPxx waarbij xx een getal is. Dit is het nummer voor algemeen gebruik, of in het engels \" G eneral P urpose\". Dit betekend niks meer dat we zelf deze pin aan en uit kunnen zetten. Voor het aansturen van de LED gebruiken we dus GP25 . Aansturen van pinnen (en de LED ) Om een Pin aan te sturen in de code moeten we wat externe functionaliteit importeren. Veel functies rondom het microcontroller boardje bevind zich in de machine module. Deze kan geimporteerd worden via import machine of een specifieke functie via from machine import < functie > . Open het volgende workshop bestand: 4_blink.py 4_blink.py 1 2 3 from machine import Pin led = Pin ( 25 , Pin . OUT ) led . on () Als we deze code regel voor regel \"vertalen\" naar het nederlands krijgen we: van de module machine, gebruik de Pin functionaliteit. variabele led is een Pin met parameters 25 (GP25) en deze pin is een output. van de variabele led, voer de functie on() uit. Bij een output sturen wij het signaal aan (aan/uit), bij een input lezen we het signaal uit klassen en objecten Tot zo ver hebben we variabelen gehad met een \"primitieve\" waardes: een getal, een stuk tekst of een decimaal getal. Naast primitieven zijn er ook klassen en objecten dit kan je zien als een groep aan data en functies in \u00e9\u00e9n variabele. Het aanroepen van Pin ( 25 , Pin . OUT ) geeft een object terug die geconfigureerd staat om GP25 te besturen als OUTPUT. Daarnaast heeft dat object ook extra functies zoals on() , off() , high() , low() en toggle() . Oefening A: Knipperen Naast de machine module wordt er in jouw workshop code ook een andere functie geimporteerd uit een andere module. Lees hiervan de beschrijving door er met je muis over te hangen (en/of lees de comment erboven). Kan je met behulp van de functies op het led object het LEDje laten knipperen (aan/uit/aan/uit/etc...)?","title":"Lampje knipperen"},{"location":"fijnstof/blink/#lampjes-knipperen","text":"Tot nu toe hebben we de microcontroller code laten uitvoeren en een resultaat terug laten sturen, zou het niet leuker zijn als we ook iets fysieks zien gebeuren? Dit word de eerste stap, tijd om een LED te laten knipperen! Houd je muis boven een term met een gestippelde onderlijning om meer informatie te krijgen","title":"Lampjes knipperen"},{"location":"fijnstof/blink/#de-theorie","text":"De Raspberry Pico heeft standaard een LED ingebouwd: Locatie van LED op de microcontroller Voordat we deze LED aan en uit kunnen zetten moeten we het concept van Pinnen / een Pin begrijpen. Wat je voor je hebt liggen is meer dan alleen een microcontroller, er zit namelijk een heel board met extra electronica om heen. Alleen de \"grote\" zwarte chip in het midden is de microcontroller, de rest zijn extra's of benodigde elektronische componenten voor bijvoorbeeld de stroom voeding. Op een chip zitten vaak veel pinnetjes, dit zijn vaak in-/uitgangen voor een signaal (zoals het aanzetten van een LEDje) of voor stroom (de + en de -). In de onderstaande afbeelding zijn deze pinnen erg goed te zien. Close-up van een chip Op het microcontroller boardje dat voor je ligt kan je vanuit de chip verschillende lijnen zien lopen naar - bijvoorbeeld - de gouden pinnen aan de zijkant van het board, maar ook naar de LED . De gouden pinnen aan het zijkant van het board maken het makkelijker om te gebruiken, in tegenstelling tot de bijna microscopische pinnen op een chip.","title":"De theorie"},{"location":"fijnstof/blink/#informatie-achterhalen","text":"Omdat een microcontroller veel verschillende functionaliteiten op de pinnen heeft moeten we goed kijken welke we gaan gebruiken. Veel van deze informatie staat op een \"pin-map\" of \"pinout diagram\". Gelukkig biedt je ontwikkelomgeving zo een diagram aan: Klik CTRL+SHIFT+P, dit opent een \"commando\" scherm in je omgeving, door wat termen te typen die lijken op wat je wilt doen krijg je alle soortgelijke functionaliteiten van je omgeving te zien. Begin met het typen van: \"pico pin map\" of \"pin map\" of \"pico\". Zoals je waarschijnlijk kan zien krijg je een lijst met commandos/functies van je ontwikkelomgeving. Gebruik je muis of de pijltjestoetsen + enter om de juiste functie te selecteren. In dit geval moeten we hebben: Pico-Go > Help > Show Pico Pin Map Commando om de Pin-Map te laten zien Eenmaal geklikt op het juiste commando zul je een nieuwe tabblad krijgen met een pin-diagram van je microcontroller board. Hier staat veel informatie in, maar voor nu zijn we geintereseerd in het bovenste label met: \" LED ( GP25 )\". Raspberry Pico Pin-Map Elk groene label is in de vorm van GPxx waarbij xx een getal is. Dit is het nummer voor algemeen gebruik, of in het engels \" G eneral P urpose\". Dit betekend niks meer dat we zelf deze pin aan en uit kunnen zetten. Voor het aansturen van de LED gebruiken we dus GP25 .","title":"Informatie achterhalen"},{"location":"fijnstof/blink/#aansturen-van-pinnen-en-de-led","text":"Om een Pin aan te sturen in de code moeten we wat externe functionaliteit importeren. Veel functies rondom het microcontroller boardje bevind zich in de machine module. Deze kan geimporteerd worden via import machine of een specifieke functie via from machine import < functie > . Open het volgende workshop bestand: 4_blink.py 4_blink.py 1 2 3 from machine import Pin led = Pin ( 25 , Pin . OUT ) led . on () Als we deze code regel voor regel \"vertalen\" naar het nederlands krijgen we: van de module machine, gebruik de Pin functionaliteit. variabele led is een Pin met parameters 25 (GP25) en deze pin is een output. van de variabele led, voer de functie on() uit. Bij een output sturen wij het signaal aan (aan/uit), bij een input lezen we het signaal uit klassen en objecten Tot zo ver hebben we variabelen gehad met een \"primitieve\" waardes: een getal, een stuk tekst of een decimaal getal. Naast primitieven zijn er ook klassen en objecten dit kan je zien als een groep aan data en functies in \u00e9\u00e9n variabele. Het aanroepen van Pin ( 25 , Pin . OUT ) geeft een object terug die geconfigureerd staat om GP25 te besturen als OUTPUT. Daarnaast heeft dat object ook extra functies zoals on() , off() , high() , low() en toggle() . Oefening A: Knipperen Naast de machine module wordt er in jouw workshop code ook een andere functie geimporteerd uit een andere module. Lees hiervan de beschrijving door er met je muis over te hangen (en/of lees de comment erboven). Kan je met behulp van de functies op het led object het LEDje laten knipperen (aan/uit/aan/uit/etc...)?","title":"Aansturen van pinnen (en de LED)"},{"location":"fijnstof/final-step/","text":"Alles samen Nu je alle individuele stappen hebt uitgevoerd is het alleen nog een kwestie van elk component samenvoegen. Open het workshop bestand 8_meting_versturen.py om aan de slag te gaan. Bij het schrijven van de code kan het helpen om voor jezelf een lijstje te maken met stappen, zoals: Maak UART verbinding voor de fijnstof sensor; Maak UART verbinding voor de LoRaWAN module; Maak een SPS30 object en een RAK3172 object; Maak verbinding met LoRaWAN; Doe een meting; Verstuurt meting. Hulp nodig? Dit is een erg lastige stap, omdat je in je hoofd een beeld moet krijgen van het hele systeem. Om je te helpen kan je naar de antwoorden folder gaan en dit als referentie gebruiken. Het is al erg knap als je het begrijpt hoe de code in het antwoord bestand loopt en werkt!","title":"Online je meting versturen"},{"location":"fijnstof/final-step/#alles-samen","text":"Nu je alle individuele stappen hebt uitgevoerd is het alleen nog een kwestie van elk component samenvoegen. Open het workshop bestand 8_meting_versturen.py om aan de slag te gaan. Bij het schrijven van de code kan het helpen om voor jezelf een lijstje te maken met stappen, zoals: Maak UART verbinding voor de fijnstof sensor; Maak UART verbinding voor de LoRaWAN module; Maak een SPS30 object en een RAK3172 object; Maak verbinding met LoRaWAN; Doe een meting; Verstuurt meting. Hulp nodig? Dit is een erg lastige stap, omdat je in je hoofd een beeld moet krijgen van het hele systeem. Om je te helpen kan je naar de antwoorden folder gaan en dit als referentie gebruiken. Het is al erg knap als je het begrijpt hoe de code in het antwoord bestand loopt en werkt!","title":"Alles samen"},{"location":"fijnstof/first-code/","text":"Je eigen code schrijven Het 'Hallo Wereld' voorbeeld De code die je in de vorige opdracht uitvoerde zag er als volgt uit: 1_print.py 1 2 3 4 5 # door middel van de `print(...)` functie kunnen we de # microcontroller een stuk tekst laten zien op de computer. # In dit geval is `print` een functie # en \"Hallo wereld!\" het parameter tussen de haakjes. print ( \"Hallo wereld!\" ) Tijdens deze workshop zal je erachter komen dat veel uitleg over de code al aanwezig is in het bestand in de vorm van zogenaamde \"comments\" (opmerkingen). In de bovenstaande code is regel 1 t/m 4 een comment omdat het begint met een # . Regel 5 is de enige code die uitgevoerd wordt in dit bestand. De functie print wordt uitgevoerd print () en voorzien van een parameter print ( \"Hallo wereld!\" ) . Zoals de comment in de code zegt: de functie print stuurt tekst of een waarde terug naar de computer. In dit geval geven wij het stuk tekst \"Hallo wereld!\" mee. Note Wist je dat een letterlijk stuk tekst zoals hieronder een string wordt genoemd? Zo worden hele getallen integers genoemd en getallen met decimalen een float . Een letterlijk stuk tekst zoals \"Hallo wereld!\" moet tussen aanhalingstekens staan, hierdoor begrijp de microcontroller dat het een stuk tekst is en niet - bijvoorbeeld - een functie. Uitdagingen Hieronder staan een aantal uitdagingen en vragen waarmee jij aan de slag kan om bekend te raken met het schrijven van code. Vergeten hoe je code uitvoert? Code kan uitgevoerd worden door op de knop \"Run\" te klikken in de groene balk. Staat er \"Pico disconnected\"? Klik dan eerst daarop om opnieuw verbinding te maken met de microcontroller. Vraag A: Meerdere keren printen Kan je meerdere keren dezelfde tekst laten versturen? In welke volgorde wordt je code uitgevoerd? Vraag B: Andere waarden printen Wat gebeurd er als je in plaats van tekst een getal als parameter meegeeft? Vraag C: Optellen Het printen van waarden is een ontzettend handige manier om te weten wat je code aan het doen is. Probeer eens een rekensom mee te geven als parameter zoals: 5 * 25 . Welke andere wiskundige tekens kan je gebruiken? Vraag D: Optellen van strings? Dat getallen op te tellen zijn is logisch... Maar kan dat ook met twee stukken tekst?","title":"Hallo wereld"},{"location":"fijnstof/first-code/#je-eigen-code-schrijven","text":"","title":"Je eigen code schrijven"},{"location":"fijnstof/first-code/#het-hallo-wereld-voorbeeld","text":"De code die je in de vorige opdracht uitvoerde zag er als volgt uit: 1_print.py 1 2 3 4 5 # door middel van de `print(...)` functie kunnen we de # microcontroller een stuk tekst laten zien op de computer. # In dit geval is `print` een functie # en \"Hallo wereld!\" het parameter tussen de haakjes. print ( \"Hallo wereld!\" ) Tijdens deze workshop zal je erachter komen dat veel uitleg over de code al aanwezig is in het bestand in de vorm van zogenaamde \"comments\" (opmerkingen). In de bovenstaande code is regel 1 t/m 4 een comment omdat het begint met een # . Regel 5 is de enige code die uitgevoerd wordt in dit bestand. De functie print wordt uitgevoerd print () en voorzien van een parameter print ( \"Hallo wereld!\" ) . Zoals de comment in de code zegt: de functie print stuurt tekst of een waarde terug naar de computer. In dit geval geven wij het stuk tekst \"Hallo wereld!\" mee. Note Wist je dat een letterlijk stuk tekst zoals hieronder een string wordt genoemd? Zo worden hele getallen integers genoemd en getallen met decimalen een float . Een letterlijk stuk tekst zoals \"Hallo wereld!\" moet tussen aanhalingstekens staan, hierdoor begrijp de microcontroller dat het een stuk tekst is en niet - bijvoorbeeld - een functie.","title":"Het 'Hallo Wereld' voorbeeld"},{"location":"fijnstof/first-code/#uitdagingen","text":"Hieronder staan een aantal uitdagingen en vragen waarmee jij aan de slag kan om bekend te raken met het schrijven van code. Vergeten hoe je code uitvoert? Code kan uitgevoerd worden door op de knop \"Run\" te klikken in de groene balk. Staat er \"Pico disconnected\"? Klik dan eerst daarop om opnieuw verbinding te maken met de microcontroller. Vraag A: Meerdere keren printen Kan je meerdere keren dezelfde tekst laten versturen? In welke volgorde wordt je code uitgevoerd? Vraag B: Andere waarden printen Wat gebeurd er als je in plaats van tekst een getal als parameter meegeeft? Vraag C: Optellen Het printen van waarden is een ontzettend handige manier om te weten wat je code aan het doen is. Probeer eens een rekensom mee te geven als parameter zoals: 5 * 25 . Welke andere wiskundige tekens kan je gebruiken? Vraag D: Optellen van strings? Dat getallen op te tellen zijn is logisch... Maar kan dat ook met twee stukken tekst?","title":"Uitdagingen"},{"location":"fijnstof/first-test/","text":"Omgeving testen Benodigdheden Zorg dat je in de online werkplek bent ingelogd en dat je de USB kabel met de microcontroller bij de hand hebt In deze stap gaan we kijken of we een stukje code kunnen laten uitvoeren op de microcontroller. Als dit lukt dan weten we dat alles gereed staat en werkt, en kunnen we verder met de workshop. Ontwikkelomgeving openen Begin met het openen van de ontwikkelomgeving. Ter gemak staat er een bestand op het bureaublad genaamd \"Workshop\", deze opent automatisch de ontwikkelomgeving in de juiste folder. Na het openen van dit bestand krijg je een scherm met de ontwikkelomgeving. Dit is eigenlijk een tekst-bewerker met veel extratjes. Hier een korte uitleg: In de linker zijbalk zie je een lijst aan bestanden; klik op een bestand in de zijbalk om deze te openen; het geopende bestand is in het midden van je scherm zichtbaar; als er meerdere bestanden open staan worden dit tabbladen; staat er een bolletje bij de naam van het tablad? Gebruikt dan CTRL+S om het bestand op te slaan; onderaan het scherm is een tab \"Terminal\". Hierin komt de verbinding met de microcontroller te staan, dus als de microcontroller iets \"zegt\" zal dit hier verschijnen. Hallo wereld uitvoeren Geen Run knop, of Pico Disconnected? Staat er in de groene balk \"Pico disconnected\"? Dan is de ontwikkelomgeving niet goed verbonden met de microcontroller. Klik op de \"Pico disconnected\" tekst om opnieuw verbinding te maken. Tijd om je eerste code uit te voeren op de microcontroller: Zorg dat je de ontwikkelomgeving open hebt staan; open het bestand ws010_print.py ; klik op de \"Run\" knop in de groene balk. De code die openstaat zal nu verstuurd worden naar de microcontroller en zal daar uitgevoerd worden. In dit geval wordt de microcontroller gecommandeerd om de tekst \"Hallo wereld\" terug te sturen naar de computer. Als het goed is verschijnt dit ook in de het onderste venster (de terminal). Wat is er gebeurd? In de onderstaande afbeelding is weergegeven wat er gebeurde toen je op \"Run\" klikte. De code die je verstuurde commandeerde de microcontroller om de tekst \"Hallo wereld\" terug te sturen. Dit gebeurde door de functie print ( \"Hallo wereld\" ) aan te roepen. Hoe de code uitgevoerd word op de microcontroller","title":"Eerste test"},{"location":"fijnstof/first-test/#omgeving-testen","text":"Benodigdheden Zorg dat je in de online werkplek bent ingelogd en dat je de USB kabel met de microcontroller bij de hand hebt In deze stap gaan we kijken of we een stukje code kunnen laten uitvoeren op de microcontroller. Als dit lukt dan weten we dat alles gereed staat en werkt, en kunnen we verder met de workshop.","title":"Omgeving testen"},{"location":"fijnstof/first-test/#ontwikkelomgeving-openen","text":"Begin met het openen van de ontwikkelomgeving. Ter gemak staat er een bestand op het bureaublad genaamd \"Workshop\", deze opent automatisch de ontwikkelomgeving in de juiste folder. Na het openen van dit bestand krijg je een scherm met de ontwikkelomgeving. Dit is eigenlijk een tekst-bewerker met veel extratjes. Hier een korte uitleg: In de linker zijbalk zie je een lijst aan bestanden; klik op een bestand in de zijbalk om deze te openen; het geopende bestand is in het midden van je scherm zichtbaar; als er meerdere bestanden open staan worden dit tabbladen; staat er een bolletje bij de naam van het tablad? Gebruikt dan CTRL+S om het bestand op te slaan; onderaan het scherm is een tab \"Terminal\". Hierin komt de verbinding met de microcontroller te staan, dus als de microcontroller iets \"zegt\" zal dit hier verschijnen.","title":"Ontwikkelomgeving openen"},{"location":"fijnstof/first-test/#hallo-wereld-uitvoeren","text":"Geen Run knop, of Pico Disconnected? Staat er in de groene balk \"Pico disconnected\"? Dan is de ontwikkelomgeving niet goed verbonden met de microcontroller. Klik op de \"Pico disconnected\" tekst om opnieuw verbinding te maken. Tijd om je eerste code uit te voeren op de microcontroller: Zorg dat je de ontwikkelomgeving open hebt staan; open het bestand ws010_print.py ; klik op de \"Run\" knop in de groene balk. De code die openstaat zal nu verstuurd worden naar de microcontroller en zal daar uitgevoerd worden. In dit geval wordt de microcontroller gecommandeerd om de tekst \"Hallo wereld\" terug te sturen naar de computer. Als het goed is verschijnt dit ook in de het onderste venster (de terminal).","title":"Hallo wereld uitvoeren"},{"location":"fijnstof/first-test/#wat-is-er-gebeurd","text":"In de onderstaande afbeelding is weergegeven wat er gebeurde toen je op \"Run\" klikte. De code die je verstuurde commandeerde de microcontroller om de tekst \"Hallo wereld\" terug te sturen. Dit gebeurde door de functie print ( \"Hallo wereld\" ) aan te roepen. Hoe de code uitgevoerd word op de microcontroller","title":"Wat is er gebeurd?"},{"location":"fijnstof/getting-started/","text":"","title":"Getting started"},{"location":"fijnstof/if-else/","text":"Als ... dan ... wat? In de vorige opdracht hebben we gezien hoe we code kunnen herhalen, maar wat als we code willen overslaan of alleen uitvoeren in specifieke omstandigheden? Dan gebruiken we if , else en elif . Dat bijna letterlijk vertaald naar als ... , anders en anders als ... (in plaats van else if gebruikt deze programmeer taal een afkorting: elif ) Conditionele code Open het volgende workshop bestand in je ontwikkelomgeving: 3_if_else.py 1 2 3 4 5 6 7 8 x = 5 if x < 5 : print ( \"x is onder de 5\" ) elif x < 10 : print ( \"x is onder de 10\" ) else : print ( \"x is niet onder de 10\" ) Net als de while-loop kan je een if-statement vrij goed vertalen naar het nederlands. Regel 3/4 vertaald zegt: als x is lager dan 5, dan print \"x is onder de 5\" . Ook in de if-statement komen blokken code voor. Namelijk het blok aan code dat uitgevoerd moet woorden als de voorwaarde voldoet (x lager is dan 5). Vraag A: Waarom elif? Welk cruciaal verschil is er tussen de code uit je workshop bestand en de onderstaande code? Tip Rechtsboven in elke code-venster staat een knop om de code te kopieren. Probeer de code eens uit te voeren en kijk naar het verschil. Zonder elif 1 2 3 4 5 6 7 x = 5 if x < 5 : print ( \"x is onder de 5\" ) if x < 10 : print ( \"x is onder de 10\" ) Herhaling Voor nu is x nog altijd 5 , maar met behulp van een while-loop kunnen we getallen van 1 tot 10 krijgen. Voor je gemak staat hieronder het voorbeeld van de while-loop: 2_while_loop.py 1 2 3 4 x = 1 while x < 10 : print ( x ) x = x + 1 Oefening B: 1 tot 10 met een if-statement Nu je de code voor een while-loop hebt en de code voor een if-statement, kan je deze twee combineren zodanig dat de if statement meerdere keren wordt uitgevoerd? Pseudo code: 1 2 3 4 5 6 7 x is 1 zolang x lager is dan 10 als x lager is dan 5 zeg \"x is lager dan 5\" anders zeg \"x is hoger dan 5\" x is x plus 1 Tijd voor willekeurigheid Als je snel bent De volgende oefeningen zijn geadvanceerder en hoef je niet per-se te snappen voor het maken van de sensor. Mocht je de vorige oefeningen snel door zijn gelopen dan kan je deze oefening ook doen. Mocht je niet genoeg tijd hebben, ga dan door naar de volgende oefening. Tot zo ver weten we elke keer al wat er geprint gaat worden, we zetten tenslotte zelf neer dat x gelijk aan 5 moet zijn. Dit kunnen we spannender maken door de microcontroller zelf een getal te laten verzinnen. In tegenstelling tot de print functie die vaak gebruik wordt, hoeft de functie voor het genereren van een willekeurig getal niet altijd bij de hand te zijn en zijn er veel verschillende vormen voor willekeurigheid: een heel getal tussen a en b een decimaal tussen 0 en 1 een willekeurige item uit een lijst met keuzes etc... Vanwege de bovenstaande redenen valt deze functionaliteit onder de zogenaamde random module. We moeten de microcontroller laten weten dat we deze functionaliteit willen gaan gebruiken. Dat doen we door middel van een import -statement: 1 import random Nu kunnen we functies vanuit de random module aanspreken zoals: 1 2 # Een willekeurig (random) heel getal (integer) tussen 0 en 10 random . randint ( 0 , 10 ) We kunnen ook alleen de randint functie importeren: 1 2 3 from random import randint randint ( 0 , 10 ) Suggesties en autocompletion De ontwikkelomgeving waarin je de code schrijft is \"slim\". Het weet vrijwel precies hoe de syntaxis in elkaar zit en welke functies je kan aanroepen. Dit is een mooi moment om dat uit te proberen. Importeer de random module, begin met het schrijven van random. en kijk hoe de suggesties verschijnen, nadat je de punt (.) typt. Zie je niks? Klik dan op CTRL+Spatie. De ontwikkelomgeving geeft suggesties Om het af te maken hoef je nu niet meer x gelijk te zetten aan 5 maar kan je gebruik maken van willekeurige getallen. Oefening C: willekeurige getallen Kan je x gelijk stellen aan een willekeurig getal tussen 0 en 10 en daaropvolgend een if-statement uitvoeren? Oefening D: veel willekeurige getallen Is de vorige oefening met de while-loop en if-statement gelukt? Kan je nu elke loop een willekeurige waarde gebruiken voor de if-statement? Let op dat je een ander variabel gebruik dan x , anders breekt je while-loop. (Snap je ook waarom?)","title":"Als, dan, wat"},{"location":"fijnstof/if-else/#als-dan-wat","text":"In de vorige opdracht hebben we gezien hoe we code kunnen herhalen, maar wat als we code willen overslaan of alleen uitvoeren in specifieke omstandigheden? Dan gebruiken we if , else en elif . Dat bijna letterlijk vertaald naar als ... , anders en anders als ... (in plaats van else if gebruikt deze programmeer taal een afkorting: elif )","title":"Als ... dan ... wat?"},{"location":"fijnstof/if-else/#conditionele-code","text":"Open het volgende workshop bestand in je ontwikkelomgeving: 3_if_else.py 1 2 3 4 5 6 7 8 x = 5 if x < 5 : print ( \"x is onder de 5\" ) elif x < 10 : print ( \"x is onder de 10\" ) else : print ( \"x is niet onder de 10\" ) Net als de while-loop kan je een if-statement vrij goed vertalen naar het nederlands. Regel 3/4 vertaald zegt: als x is lager dan 5, dan print \"x is onder de 5\" . Ook in de if-statement komen blokken code voor. Namelijk het blok aan code dat uitgevoerd moet woorden als de voorwaarde voldoet (x lager is dan 5). Vraag A: Waarom elif? Welk cruciaal verschil is er tussen de code uit je workshop bestand en de onderstaande code? Tip Rechtsboven in elke code-venster staat een knop om de code te kopieren. Probeer de code eens uit te voeren en kijk naar het verschil. Zonder elif 1 2 3 4 5 6 7 x = 5 if x < 5 : print ( \"x is onder de 5\" ) if x < 10 : print ( \"x is onder de 10\" )","title":"Conditionele code"},{"location":"fijnstof/if-else/#herhaling","text":"Voor nu is x nog altijd 5 , maar met behulp van een while-loop kunnen we getallen van 1 tot 10 krijgen. Voor je gemak staat hieronder het voorbeeld van de while-loop: 2_while_loop.py 1 2 3 4 x = 1 while x < 10 : print ( x ) x = x + 1 Oefening B: 1 tot 10 met een if-statement Nu je de code voor een while-loop hebt en de code voor een if-statement, kan je deze twee combineren zodanig dat de if statement meerdere keren wordt uitgevoerd? Pseudo code: 1 2 3 4 5 6 7 x is 1 zolang x lager is dan 10 als x lager is dan 5 zeg \"x is lager dan 5\" anders zeg \"x is hoger dan 5\" x is x plus 1","title":"Herhaling"},{"location":"fijnstof/if-else/#tijd-voor-willekeurigheid","text":"Als je snel bent De volgende oefeningen zijn geadvanceerder en hoef je niet per-se te snappen voor het maken van de sensor. Mocht je de vorige oefeningen snel door zijn gelopen dan kan je deze oefening ook doen. Mocht je niet genoeg tijd hebben, ga dan door naar de volgende oefening. Tot zo ver weten we elke keer al wat er geprint gaat worden, we zetten tenslotte zelf neer dat x gelijk aan 5 moet zijn. Dit kunnen we spannender maken door de microcontroller zelf een getal te laten verzinnen. In tegenstelling tot de print functie die vaak gebruik wordt, hoeft de functie voor het genereren van een willekeurig getal niet altijd bij de hand te zijn en zijn er veel verschillende vormen voor willekeurigheid: een heel getal tussen a en b een decimaal tussen 0 en 1 een willekeurige item uit een lijst met keuzes etc... Vanwege de bovenstaande redenen valt deze functionaliteit onder de zogenaamde random module. We moeten de microcontroller laten weten dat we deze functionaliteit willen gaan gebruiken. Dat doen we door middel van een import -statement: 1 import random Nu kunnen we functies vanuit de random module aanspreken zoals: 1 2 # Een willekeurig (random) heel getal (integer) tussen 0 en 10 random . randint ( 0 , 10 ) We kunnen ook alleen de randint functie importeren: 1 2 3 from random import randint randint ( 0 , 10 ) Suggesties en autocompletion De ontwikkelomgeving waarin je de code schrijft is \"slim\". Het weet vrijwel precies hoe de syntaxis in elkaar zit en welke functies je kan aanroepen. Dit is een mooi moment om dat uit te proberen. Importeer de random module, begin met het schrijven van random. en kijk hoe de suggesties verschijnen, nadat je de punt (.) typt. Zie je niks? Klik dan op CTRL+Spatie. De ontwikkelomgeving geeft suggesties Om het af te maken hoef je nu niet meer x gelijk te zetten aan 5 maar kan je gebruik maken van willekeurige getallen. Oefening C: willekeurige getallen Kan je x gelijk stellen aan een willekeurig getal tussen 0 en 10 en daaropvolgend een if-statement uitvoeren? Oefening D: veel willekeurige getallen Is de vorige oefening met de while-loop en if-statement gelukt? Kan je nu elke loop een willekeurige waarde gebruiken voor de if-statement? Let op dat je een ander variabel gebruik dan x , anders breekt je while-loop. (Snap je ook waarom?)","title":"Tijd voor willekeurigheid"},{"location":"fijnstof/lorawan/","text":"LoRa(WAN) verbinding Nu het gelukt is om de sensor uit te lezen, willen we deze metingen verzenden naar het internet. Het liefst zonder een kilometer aan internetkabel en zo energie zuinig mogelijk. Hiervoor is LoRa een perfecte match! LoRa is een techniek om draadloos data te versturen op lange afstand, net als WiFi en je 3g/4g/5g. LoRa gebruikt minder stroom en kan op langere afstand data versturen (enkele kilometers tot tientallen kilometers), het nadeel is dat het - vergeleken met wifi en een mobiel netwerk - ontzettend traag is. Een 1 minuut youtube video is ongeveer 50MB (dat is 50.000.000 bytes) en duurt ongeveer 10 uur om te versturen over LoRa. Echter, een meetwaarde is vaak maar een paar bytes en kan dus makkelijk verstuurd worden. Maar enkel met LoRa zijn we er niet. Een LoRa bericht kan namelijk alleen door een LoRa ontvanger ontvangen worden en kan dus niet bij het internet. De oplossing hiervoor is een apparaat dat aan de ene kant een LoRa ontvanger heeft en aan de andere kant een internet verbinding. Verbindingen van een LoRa apparaat naar het internet LoRa vs. LoRaWAN LoRa is de technologie om draadloos data te versturen, wanneer we LoRa gebruiken in combinatie met gateways en een internet server noemen we het LoRaWAN wat staat voor: Lo ng Ra nge W ide A rea N etwork. Zoals je in het diagram hierboven kan zien wordt de LoRa techniek gebruikt om data te versturen naar Gateways. Het hele systeem samen wordt LoRaWAN genoemd. Met behulp van Gateways kunnen we LoRa berichten ontvangen en doorsturen naar het internet. Voordat de berichten via het internet bij jou aankomen moeten ze eerst ontsleuteld worden en gevalideerd, dit gebeurd via een netwerk server. In het diagram hierboven kan je zien dat het TheThingsNetwork is. Om een dekkend netwerk te hebben moeten er dus veel van deze Gateways geplaatst zijn die samenwerken. Gelukkig is er het TheThingsNetwork. Dat is een LoRa netwerk met duizenden vrijwilligers die zo een gateway hebben geplaatst in hun huis, boven op hun dak of zelfs op vuurtorens en windturbines! Ook het Goese Lyceum en Pieter Zeeman Lyceum dragen bij aan het netwerk via een gateway. Beveiliging Maar als iedereen via LoRa je berichten kan ontvangen, hoe is dit dan veilig? Kunnen anderen niet meeluisteren? Als je LoRaWAN gebruikt met een netwerk dan wordt al je data versleuteld zodat niemand kan meelezen. Alleen jij - want jij hebt de sleutel - kan deze data ontsleutelen en gebruiken. Elke node (apparaat dat LoRaWAN gebruikt) heeft een eigen uniek identificatie nummer en sleutels. Een sleutel is in principe een wachtwoord om je data te beveiligen. De namen van deze identificatie nummers en sleutels zijn als volgt: DevEUI; uniek node identificatie nummer. JoinEUI; identificatie nummer voor het netwerk waarmee je verbind. In ons geval is dit 16x '0'. AppKey; de geheime sleutel om je data mee te beveiligen.","title":"Wat is LoRa(WAN)"},{"location":"fijnstof/lorawan/#lorawan-verbinding","text":"Nu het gelukt is om de sensor uit te lezen, willen we deze metingen verzenden naar het internet. Het liefst zonder een kilometer aan internetkabel en zo energie zuinig mogelijk. Hiervoor is LoRa een perfecte match! LoRa is een techniek om draadloos data te versturen op lange afstand, net als WiFi en je 3g/4g/5g. LoRa gebruikt minder stroom en kan op langere afstand data versturen (enkele kilometers tot tientallen kilometers), het nadeel is dat het - vergeleken met wifi en een mobiel netwerk - ontzettend traag is. Een 1 minuut youtube video is ongeveer 50MB (dat is 50.000.000 bytes) en duurt ongeveer 10 uur om te versturen over LoRa. Echter, een meetwaarde is vaak maar een paar bytes en kan dus makkelijk verstuurd worden. Maar enkel met LoRa zijn we er niet. Een LoRa bericht kan namelijk alleen door een LoRa ontvanger ontvangen worden en kan dus niet bij het internet. De oplossing hiervoor is een apparaat dat aan de ene kant een LoRa ontvanger heeft en aan de andere kant een internet verbinding. Verbindingen van een LoRa apparaat naar het internet LoRa vs. LoRaWAN LoRa is de technologie om draadloos data te versturen, wanneer we LoRa gebruiken in combinatie met gateways en een internet server noemen we het LoRaWAN wat staat voor: Lo ng Ra nge W ide A rea N etwork. Zoals je in het diagram hierboven kan zien wordt de LoRa techniek gebruikt om data te versturen naar Gateways. Het hele systeem samen wordt LoRaWAN genoemd. Met behulp van Gateways kunnen we LoRa berichten ontvangen en doorsturen naar het internet. Voordat de berichten via het internet bij jou aankomen moeten ze eerst ontsleuteld worden en gevalideerd, dit gebeurd via een netwerk server. In het diagram hierboven kan je zien dat het TheThingsNetwork is. Om een dekkend netwerk te hebben moeten er dus veel van deze Gateways geplaatst zijn die samenwerken. Gelukkig is er het TheThingsNetwork. Dat is een LoRa netwerk met duizenden vrijwilligers die zo een gateway hebben geplaatst in hun huis, boven op hun dak of zelfs op vuurtorens en windturbines! Ook het Goese Lyceum en Pieter Zeeman Lyceum dragen bij aan het netwerk via een gateway.","title":"LoRa(WAN) verbinding"},{"location":"fijnstof/lorawan/#beveiliging","text":"Maar als iedereen via LoRa je berichten kan ontvangen, hoe is dit dan veilig? Kunnen anderen niet meeluisteren? Als je LoRaWAN gebruikt met een netwerk dan wordt al je data versleuteld zodat niemand kan meelezen. Alleen jij - want jij hebt de sleutel - kan deze data ontsleutelen en gebruiken. Elke node (apparaat dat LoRaWAN gebruikt) heeft een eigen uniek identificatie nummer en sleutels. Een sleutel is in principe een wachtwoord om je data te beveiligen. De namen van deze identificatie nummers en sleutels zijn als volgt: DevEUI; uniek node identificatie nummer. JoinEUI; identificatie nummer voor het netwerk waarmee je verbind. In ons geval is dit 16x '0'. AppKey; de geheime sleutel om je data mee te beveiligen.","title":"Beveiliging"},{"location":"fijnstof/pm-measurement/","text":"Tijd om echt te meten Nu we het serienummer van de fijnstofsensor hebben kunnen uitlezen weten we dat de verbinding werkt. In dit hoofdstuk gaan we dan eindelijk meetresultaten krijgen, maar voor een allerlaatste keer vatten we nog een en ander samen wat je tot nu toe geleerd hebt. Wat je tot nu toe weet In alle afgelopen hoofdstukken hebben we veel naar theorie en code gekeken. Als het goed is heb je nu een goed idee hoe bepaalde functionaliteiten van de microcontroller, code en sensor werkt. Hieronder staan de belangrijke punten nog eens samengevat: je kan de microcontroller tekst en waardes terug laten sturen naar de computer ( print ( .. ) ); je kan stukken code laten herhalen ( while < voorwaarde > : ); je kan stukken code alleen uitvoeren als een bepaalde voorwaarde voldoet ( if < voorwaarde > : en else : ); je hebt een idee wat objecten zijn en dat deze objecten eigenschappen en functies hebben ( led = Pin ( ... ) en led . on () ) je begrijpt dat de microcontroller naar de sensor communiceert via UART en hoe je deze verbinding opstelt; en misschien de belangrijkste twee: je kan gebruik maken van de ontwikkelomgeving om suggesties en aanvullingen te krijgen; je kan gebruik maken van de ontwikkelomgeving om een omschrijving van een functie / object te zien. In de komende delen van de workshop kan je deze kennis zelf gaan toepassen bij het starten en uitlezen van de sensor, bij het verbinden van de radio module en het verzend van informatie. Code schrijven en fijnstof meten De SPS30 fijnstof sensor maakt gebruikt van een kleine ventilator en een laser. Voordat we een meting kunnen uitlezen moeten we de sensor laten starten met meten, het duurt ongeveer 2 seconden na het starten van de sensor voordat de eerste meetresultaten beschikbaar zijn. Maak gebruik van het volgende diagram en het workshop bestand genaamd: 6_sps30.py om een meting uit te gaan lezen. Gebruik de comments in de code als hints om zelf de code de schrijven waarmee je de sensor aanstuurt. Process weergave van het uitlezen van de fijnstof sensor Oefening A: Maken van een meting Schrijf code om een meetresultaat te krijgen met behulp van het bovenstaande diagram, de suggesties en aanvulling van je ontwikkelomgeving en de comments in de code. Oefening B: Continu meten Mocht je het nog niet gedaan hebben in de vorige oefening: Kan je je code aanpassen zodat er elke 2 seconde een meting word verricht? Denk aan het laten knipperen van het LED lampje via een while-loop Oefening C: Oneindig herhalen? Kan je zorgen dat de while-loop nooit stopt? Hiervoor moet de voorwaarde altijd voldoen.","title":"Een meting doen"},{"location":"fijnstof/pm-measurement/#tijd-om-echt-te-meten","text":"Nu we het serienummer van de fijnstofsensor hebben kunnen uitlezen weten we dat de verbinding werkt. In dit hoofdstuk gaan we dan eindelijk meetresultaten krijgen, maar voor een allerlaatste keer vatten we nog een en ander samen wat je tot nu toe geleerd hebt.","title":"Tijd om echt te meten"},{"location":"fijnstof/pm-measurement/#wat-je-tot-nu-toe-weet","text":"In alle afgelopen hoofdstukken hebben we veel naar theorie en code gekeken. Als het goed is heb je nu een goed idee hoe bepaalde functionaliteiten van de microcontroller, code en sensor werkt. Hieronder staan de belangrijke punten nog eens samengevat: je kan de microcontroller tekst en waardes terug laten sturen naar de computer ( print ( .. ) ); je kan stukken code laten herhalen ( while < voorwaarde > : ); je kan stukken code alleen uitvoeren als een bepaalde voorwaarde voldoet ( if < voorwaarde > : en else : ); je hebt een idee wat objecten zijn en dat deze objecten eigenschappen en functies hebben ( led = Pin ( ... ) en led . on () ) je begrijpt dat de microcontroller naar de sensor communiceert via UART en hoe je deze verbinding opstelt; en misschien de belangrijkste twee: je kan gebruik maken van de ontwikkelomgeving om suggesties en aanvullingen te krijgen; je kan gebruik maken van de ontwikkelomgeving om een omschrijving van een functie / object te zien. In de komende delen van de workshop kan je deze kennis zelf gaan toepassen bij het starten en uitlezen van de sensor, bij het verbinden van de radio module en het verzend van informatie.","title":"Wat je tot nu toe weet"},{"location":"fijnstof/pm-measurement/#code-schrijven-en-fijnstof-meten","text":"De SPS30 fijnstof sensor maakt gebruikt van een kleine ventilator en een laser. Voordat we een meting kunnen uitlezen moeten we de sensor laten starten met meten, het duurt ongeveer 2 seconden na het starten van de sensor voordat de eerste meetresultaten beschikbaar zijn. Maak gebruik van het volgende diagram en het workshop bestand genaamd: 6_sps30.py om een meting uit te gaan lezen. Gebruik de comments in de code als hints om zelf de code de schrijven waarmee je de sensor aanstuurt. Process weergave van het uitlezen van de fijnstof sensor Oefening A: Maken van een meting Schrijf code om een meetresultaat te krijgen met behulp van het bovenstaande diagram, de suggesties en aanvulling van je ontwikkelomgeving en de comments in de code. Oefening B: Continu meten Mocht je het nog niet gedaan hebben in de vorige oefening: Kan je je code aanpassen zodat er elke 2 seconde een meting word verricht? Denk aan het laten knipperen van het LED lampje via een while-loop Oefening C: Oneindig herhalen? Kan je zorgen dat de while-loop nooit stopt? Hiervoor moet de voorwaarde altijd voldoen.","title":"Code schrijven en fijnstof meten"},{"location":"fijnstof/pm/","text":"Fijnstof Zoals je bij de introductie hebt gelezen gaan we fijnstof meten met behulp van de SPS30 sensor. Deze pagina gaat kort in op wat fijnstof is en hoe we het gaan meten. Door een stukje van deze theorie te begrijpen kunnen we straks de fijnstof sensor goed testen. Wat is fijnstof? Fijnstof zijn ontzettend kleine deeltjes van een paar micrometer (dat is 0.000001 meter of 0.001 millimeter). Deze kleine deeltje kunnen invloed hebben op je gezondheid. Over het algemeen hangt luchtverontreiniging en de concentratie fijnstof samen. De grootste bron van fijnstof is het dagelijks verkeer. Dit draagt tot wel een derde bij aan alle fijnstof emissie in Nederland. 1 Zoals je kan verwachten is het inademen bij de uitlaat van een brandstof-auto niet de prettigste ervaring en zeker niet een gezonde. De concentratie fijnstof geeft dus een goede indicatie van de luchtkwaliteit in een gebied. De grootte van fijnstof kan ook nog verschillen. In deze workshop gaan we de concentratie van 2.5 micrometer deeltjes meten. Grootte van fijnstof (bron: hoemeetiklucht.eu) Hoe wordt fijnstof gemeten Hoe de sensor precies werkt is te complex om uit te leggen in deze workshop, maar met het onderstaande figuur kan je een idee krijgen. Het proces gaat in drie stappen: allereerst moet er een kleine luchstroom zijn om buitenlucht in de sensor te krijgen. Vervolgens gaat deze lucht met fijnstof deeltjes langs een lichtstraal; de laser. Naast het pad van de laser staat een erg gevoellige lichtsensor. De fijnstof deeltjes zullen de lichtstraal verstrooiien waardoor het opgevangen kan worden met de lichtsensor. Door deze verstrooiing kunnen de fijnstof eigenschappen in de lucht gemeten worden. Naast deze methode van meten zijn er ook nog andere methoden, die wellicht goedkoper of meer accuraat zijn. Hoe fijnstof gemeten kan worden met een laser Bron: The pocket lab Hoe gaan wij fijnstof meten? Voor het meten van fijnstof gaan we gebruik maken van een sensor, namelijk de Sensirion SPS30 sensor. Dit is een klein groen kastje dat van binnen gebruik maakt van een kleine ventilator en laser om te meten hoeveel fijnstof er in de lucht zit. Het is aan ons om commando's naar de sensor te versturen en resultaten uit te lezen. De SPS30 fijnstof sensor Bron: https://www.rivm.nl/fijn-stof/emissies \u21a9","title":"Wat is fijnstof"},{"location":"fijnstof/pm/#fijnstof","text":"Zoals je bij de introductie hebt gelezen gaan we fijnstof meten met behulp van de SPS30 sensor. Deze pagina gaat kort in op wat fijnstof is en hoe we het gaan meten. Door een stukje van deze theorie te begrijpen kunnen we straks de fijnstof sensor goed testen.","title":"Fijnstof"},{"location":"fijnstof/pm/#wat-is-fijnstof","text":"Fijnstof zijn ontzettend kleine deeltjes van een paar micrometer (dat is 0.000001 meter of 0.001 millimeter). Deze kleine deeltje kunnen invloed hebben op je gezondheid. Over het algemeen hangt luchtverontreiniging en de concentratie fijnstof samen. De grootste bron van fijnstof is het dagelijks verkeer. Dit draagt tot wel een derde bij aan alle fijnstof emissie in Nederland. 1 Zoals je kan verwachten is het inademen bij de uitlaat van een brandstof-auto niet de prettigste ervaring en zeker niet een gezonde. De concentratie fijnstof geeft dus een goede indicatie van de luchtkwaliteit in een gebied. De grootte van fijnstof kan ook nog verschillen. In deze workshop gaan we de concentratie van 2.5 micrometer deeltjes meten. Grootte van fijnstof (bron: hoemeetiklucht.eu)","title":"Wat is fijnstof?"},{"location":"fijnstof/pm/#hoe-wordt-fijnstof-gemeten","text":"Hoe de sensor precies werkt is te complex om uit te leggen in deze workshop, maar met het onderstaande figuur kan je een idee krijgen. Het proces gaat in drie stappen: allereerst moet er een kleine luchstroom zijn om buitenlucht in de sensor te krijgen. Vervolgens gaat deze lucht met fijnstof deeltjes langs een lichtstraal; de laser. Naast het pad van de laser staat een erg gevoellige lichtsensor. De fijnstof deeltjes zullen de lichtstraal verstrooiien waardoor het opgevangen kan worden met de lichtsensor. Door deze verstrooiing kunnen de fijnstof eigenschappen in de lucht gemeten worden. Naast deze methode van meten zijn er ook nog andere methoden, die wellicht goedkoper of meer accuraat zijn. Hoe fijnstof gemeten kan worden met een laser Bron: The pocket lab","title":"Hoe wordt fijnstof gemeten"},{"location":"fijnstof/pm/#hoe-gaan-wij-fijnstof-meten","text":"Voor het meten van fijnstof gaan we gebruik maken van een sensor, namelijk de Sensirion SPS30 sensor. Dit is een klein groen kastje dat van binnen gebruik maakt van een kleine ventilator en laser om te meten hoeveel fijnstof er in de lucht zit. Het is aan ons om commando's naar de sensor te versturen en resultaten uit te lezen. De SPS30 fijnstof sensor Bron: https://www.rivm.nl/fijn-stof/emissies \u21a9","title":"Hoe gaan wij fijnstof meten?"},{"location":"fijnstof/rak3172/","text":"LoRaWAN gebruiken Voor het verbinden en versturen van data via LoRaWAN gebruiken we de RAK3172 module. Deze module communiceert ook via UART, de microcontroller heeft nog een extra UART port over die we hiervoor gaan gebruiken, namelijk UART0. De RAK3172 LoRaWAN module Module aansluiten Net als bij de fijnstof sensor moeten we deze module aansluiten aan de microcontroller. Gebruikt hiervoor weer de pin-map van de pico. De pin map van de LoRaWAN module staat op de module zelf, kijk maar eens! Met behulp van de pin maps kan je de volgende verbinding gaan maken: Microcontroller pin (GPxx) Module pin Omschrijving VSYS +5V/VDD De stroomvoeding voor de LoRaWAN module GND GND Stroom grond UART0 TX (GP0) RX Data vanuit microcontroller naar de LoRaWAN module UART0 RX (GP1) TX Data vanuit LoRaWAN module naar de microcontroller Een refresher nodig? Kijk eens bij het hoofdstuk: Praten met de sensor , om te zien hoe het opzetten van de verbinding werkt. Let wel op dat je UART1 met UART0 vervang en de juiste pinnen gebruikt. Uiteindelijk ziet je opstelling er als volgt uit: Het hele systeem Code schrijven LoRaWAN sleutels krijgen Om een LoRaWAN verbinding te krijgen heb je de sleutels nodig die in het vorige hoofdstuk besproken zijn (DevEUI, JoinEUI en AppKey). Vraag aan de workshopbegeleider om deze sleutels en zeg daarbij de groepsnaam die je helemaal in het begin van de workshop hebt ingevuld tijdens het maken van een verbinding. De begeleider zal verbinding maken met je omgeving en de sleutels erin plakken. Open het workshop bestand: 7_rak3172.py . Lees de comments goed door, daar staan al ontzettend veel tips in! 1 2 3 4 5 6 7 from machine import UART , Pin from lib.rak3172 import RAK3172 verbinding = UART ( id = 0 , baudrate = 9600 , tx = Pin ( 0 ), rx = Pin ( 1 )) lora = RAK3172 ( verbinding ) # Zelf aanvullen Deze code lijkt erg veel op die van het uitlezen van de sensor, alleen deze keer gaan we niks uitlezen maar data versturen. Maak gebruik van je ontwikkelomgeving om erachter te komen welke functies het lora object heeft. Hoe weet ik of LoRaWAN werkt? Wanneer je de lora . verbind ( .. ) functie gebruikt zal je LoRaWAN module gaan proberen te verbinden met het TheThingsNetwork. De functie zelf zal True of False teruggeven als het gelukt of niet-gelukt is. Ook op de TheThingsNetwork webpagina kan je zien of je node verbindt, vraag aan een begeleider om dit op het scherm te zetten.","title":"LoRaWAN module"},{"location":"fijnstof/rak3172/#lorawan-gebruiken","text":"Voor het verbinden en versturen van data via LoRaWAN gebruiken we de RAK3172 module. Deze module communiceert ook via UART, de microcontroller heeft nog een extra UART port over die we hiervoor gaan gebruiken, namelijk UART0. De RAK3172 LoRaWAN module","title":"LoRaWAN gebruiken"},{"location":"fijnstof/rak3172/#module-aansluiten","text":"Net als bij de fijnstof sensor moeten we deze module aansluiten aan de microcontroller. Gebruikt hiervoor weer de pin-map van de pico. De pin map van de LoRaWAN module staat op de module zelf, kijk maar eens! Met behulp van de pin maps kan je de volgende verbinding gaan maken: Microcontroller pin (GPxx) Module pin Omschrijving VSYS +5V/VDD De stroomvoeding voor de LoRaWAN module GND GND Stroom grond UART0 TX (GP0) RX Data vanuit microcontroller naar de LoRaWAN module UART0 RX (GP1) TX Data vanuit LoRaWAN module naar de microcontroller Een refresher nodig? Kijk eens bij het hoofdstuk: Praten met de sensor , om te zien hoe het opzetten van de verbinding werkt. Let wel op dat je UART1 met UART0 vervang en de juiste pinnen gebruikt. Uiteindelijk ziet je opstelling er als volgt uit: Het hele systeem","title":"Module aansluiten"},{"location":"fijnstof/rak3172/#code-schrijven","text":"LoRaWAN sleutels krijgen Om een LoRaWAN verbinding te krijgen heb je de sleutels nodig die in het vorige hoofdstuk besproken zijn (DevEUI, JoinEUI en AppKey). Vraag aan de workshopbegeleider om deze sleutels en zeg daarbij de groepsnaam die je helemaal in het begin van de workshop hebt ingevuld tijdens het maken van een verbinding. De begeleider zal verbinding maken met je omgeving en de sleutels erin plakken. Open het workshop bestand: 7_rak3172.py . Lees de comments goed door, daar staan al ontzettend veel tips in! 1 2 3 4 5 6 7 from machine import UART , Pin from lib.rak3172 import RAK3172 verbinding = UART ( id = 0 , baudrate = 9600 , tx = Pin ( 0 ), rx = Pin ( 1 )) lora = RAK3172 ( verbinding ) # Zelf aanvullen Deze code lijkt erg veel op die van het uitlezen van de sensor, alleen deze keer gaan we niks uitlezen maar data versturen. Maak gebruik van je ontwikkelomgeving om erachter te komen welke functies het lora object heeft.","title":"Code schrijven"},{"location":"fijnstof/rak3172/#hoe-weet-ik-of-lorawan-werkt","text":"Wanneer je de lora . verbind ( .. ) functie gebruikt zal je LoRaWAN module gaan proberen te verbinden met het TheThingsNetwork. De functie zelf zal True of False teruggeven als het gelukt of niet-gelukt is. Ook op de TheThingsNetwork webpagina kan je zien of je node verbindt, vraag aan een begeleider om dit op het scherm te zetten.","title":"Hoe weet ik of LoRaWAN werkt?"},{"location":"fijnstof/start/","text":"Workshop: IoT fijnstof sensor In de workshop \"IoT fijnstof sensor\" gaan we met behulp van een microcontroller, sensor en radiomodule een draadloos meetapparaat maken dat elke 10 seconden een meting doet en data doorstuurt. Voor het versturen van data maken we gebruik van het LoRaWAN netwerk. Samen met duizenden vrijwilligers is er een gratis netwerk opgezet om data te versturen en ontvangen, dit is het TheThingsNetwork. De Provincie Zeeland en het Waterschap Scheldestromen hebben gezamelijk een Zeeland dekkend netwerk gemaakt. Ook het Goese Lyceum en Pieter Zeeman Lyceum dragen bij aan het netwerk via een ontvanger. Benodigdheden Zorg dat je de volgende materialen bij de hand hebt. Klik op de tabbladen onder de lijst om een foto bij het item te zien. Microcontroller (Raspberry Pico) Radio module (RAK3172 LoRaWAN Module) Fijnstof sensor (SPS30 sensor) Breadboard Kabeltjes (Jumpers) USB-Kabel Microcontroller Radio module Fijnstof sensor Breadboard Kabeltjes USB Kabel Online werkplek Om te zorgen dat iedere deelnemer in dezelfde soort omgeving werkt en niks hoeft te installeren worden er online computers voorzien. Je hoeft zelf alleen een ondersteunde browser te hebben. 1 De workshopbegeleider zal je voorzien van een link naar deze omgeving met een workshopcode. Voordat de omgeving opent moet je ook een naam kiezen. Dit is je groepsnaam en kan worden gebruikt om ondersteuning te vragen en om met meerdere mensen in \u00e9\u00e9n omgeving te werken. Verbinden met online werkplek Meerdere verbindingen Meerdere mensen op jouw online omgeving? Gebruik dezelfde groepscode, maar houdt CTRL ingedrukt bij het klikken op \"Connect\". Hierdoor is er niet nog een microcontroller vereist en dit voorkomt fouten. Na het invullen van de workshopcode en je groepsnaam krijg je een wit scherm te zien met een groene \"Connect\" knop. Voordat je op deze knop druk moet de microcontroller via USB verbonden zijn aan je computer. Zodra je op de \"Connect\" knop klikt zal er een kleine popup verschijnen die vraagt verbinding te maken met een apparaat. Er hoort slechts \u00e9\u00e9n apparaat in de lijst te staan dat lijkt op \"Board in FS Mode\". Dat is de microcontroller, selecteer deze en klik op OK. Als alles goed gaat zal krijg je een bureaublad te zien. Popup om te verbinden met de microcontroller De online werkplek Volgende stap Onderaan de pagina in de zwarte balk staat een knop om naar de volgende stap/opdracht/pagina te gaan. Momenteel worden alleen de Chrome en Edge browser ondersteund \u21a9","title":"Introductie"},{"location":"fijnstof/start/#workshop-iot-fijnstof-sensor","text":"In de workshop \"IoT fijnstof sensor\" gaan we met behulp van een microcontroller, sensor en radiomodule een draadloos meetapparaat maken dat elke 10 seconden een meting doet en data doorstuurt. Voor het versturen van data maken we gebruik van het LoRaWAN netwerk. Samen met duizenden vrijwilligers is er een gratis netwerk opgezet om data te versturen en ontvangen, dit is het TheThingsNetwork. De Provincie Zeeland en het Waterschap Scheldestromen hebben gezamelijk een Zeeland dekkend netwerk gemaakt. Ook het Goese Lyceum en Pieter Zeeman Lyceum dragen bij aan het netwerk via een ontvanger.","title":"Workshop: IoT fijnstof sensor"},{"location":"fijnstof/start/#benodigdheden","text":"Zorg dat je de volgende materialen bij de hand hebt. Klik op de tabbladen onder de lijst om een foto bij het item te zien. Microcontroller (Raspberry Pico) Radio module (RAK3172 LoRaWAN Module) Fijnstof sensor (SPS30 sensor) Breadboard Kabeltjes (Jumpers) USB-Kabel Microcontroller Radio module Fijnstof sensor Breadboard Kabeltjes USB Kabel","title":"Benodigdheden"},{"location":"fijnstof/start/#online-werkplek","text":"Om te zorgen dat iedere deelnemer in dezelfde soort omgeving werkt en niks hoeft te installeren worden er online computers voorzien. Je hoeft zelf alleen een ondersteunde browser te hebben. 1 De workshopbegeleider zal je voorzien van een link naar deze omgeving met een workshopcode. Voordat de omgeving opent moet je ook een naam kiezen. Dit is je groepsnaam en kan worden gebruikt om ondersteuning te vragen en om met meerdere mensen in \u00e9\u00e9n omgeving te werken.","title":"Online werkplek"},{"location":"fijnstof/start/#verbinden-met-online-werkplek","text":"Meerdere verbindingen Meerdere mensen op jouw online omgeving? Gebruik dezelfde groepscode, maar houdt CTRL ingedrukt bij het klikken op \"Connect\". Hierdoor is er niet nog een microcontroller vereist en dit voorkomt fouten. Na het invullen van de workshopcode en je groepsnaam krijg je een wit scherm te zien met een groene \"Connect\" knop. Voordat je op deze knop druk moet de microcontroller via USB verbonden zijn aan je computer. Zodra je op de \"Connect\" knop klikt zal er een kleine popup verschijnen die vraagt verbinding te maken met een apparaat. Er hoort slechts \u00e9\u00e9n apparaat in de lijst te staan dat lijkt op \"Board in FS Mode\". Dat is de microcontroller, selecteer deze en klik op OK. Als alles goed gaat zal krijg je een bureaublad te zien. Popup om te verbinden met de microcontroller De online werkplek Volgende stap Onderaan de pagina in de zwarte balk staat een knop om naar de volgende stap/opdracht/pagina te gaan. Momenteel worden alleen de Chrome en Edge browser ondersteund \u21a9","title":"Verbinden met online werkplek"},{"location":"fijnstof/uart/","text":"Communicatie met de sensor Op een manier moeten we data naar de sensor sturen en een reactie - zoals meetresultaat - kunnen ontvangen. Zoals je eerder - bij het hoofdstuk over het LED lampje - hebt geleerd kunnen we een aan of uit signaal versturen. Op deze manier zou je bijvoorbeeld morse code kunnen versturen, maar dat kan efficienter. Communicatie tussen de microcontroller en sensor Een betere manier dan morse om data te versturen via digitale signalen kan met UART . Hiermee kunnen we met twee kabels, die de microcontroller verbindt aan de sensor, data ontvangen( RX ) en versturen( TX ) 1 . Uiteindelijk komen de meeste manieren van digitale communicatie neer op aan en uit, 1 en 0 of hoog en lage spanningen. Een UART bericht kan je zien in het diagram hieronder. Om het UART protocol zelf te implementeren is vrij complex. Gelukkig heeft onze microcontroller al een aantal protocollen ingebouwd, waaronder UART . Het enige wat wij moeten doen is de sensor goed aansluiten met de kabeltjes en de microcontroller zo programmeren dat het UART gaat gebruiken. UART iets verder uitgelegd In het diagram hieroner kan je de stroom op een van de data kabels zien over een bepaalde tijd (op de horizontale as). Het hele bericht dat je ziet noemen we een \"frame\". Een frame heeft een begin en een einde. In dit geval is het begin de \"start bit \", dus een laag signaal voor een bepaalde tijd. Dit wordt gevolgd door 8 data bits en met twee stop bits. De stop bits indiceren het einde van de frame. De \"Parity bit \" is een simpele manier om te zien of er een fout is tijdens de communicatie. De parity bit geeft aan of er een even of oneven aantal 1'tjes in de frame zitten. Mocht er dan een frame ontvangen zijn en de parity- bit klopt niet, dan weten we dat er iets fout is gegaan tijdens het ontvangen. Hoge en lage spanningen vormen een bericht in UART Breadboard aansluiting Let op! Het is handig om te weten hoe deze opstelling werkt, maar deze stappen hoef je niet te volgen als jouw sensor al is aangesloten Voor het aansluiten van de sensor aan de microcontroller gaan we gebruik maken van een breadboard met jumpers (kabeltjes). Met een breadboard kunnen we de pinnen van de microcontroller verbinden aan de pinnen van de sensor, zonder permanente aansluitingen te maken. Hiervoor moet je wel weten hoe een breadboard in elkaar zit. Een breadboard bestaat uit rijen (horizontaal) en kolommen (verticaal). Zoals het diagram hieronder laat zien is elke rij met elkaar verbonden. Hiermee kunnen we dus tot 5 kabels met elkaar verbinden per rij. De enige uitzondering hierop is de + en - kolom die verticaal met elkaar verbonden zijn. Tip De microcontroller past precies in het midden de breadboard waardoor je makkelijk de pinnen van de microcontroller kan verbinden met de sensor. De voor- en achterkant van een breadboard laat zien hoe de pinnen verbonden zijn met elkaar Sensor aansluiting De microcontroller heeft UART ingebouwd waar we gebruik van kunnen maken. Deze UART zit verbonden op bepaalde pinnen. Als je de Pin-Map weer opened kan je deze herkennen door het (licht)paarse label waarin staat \"UART0\" of \"UART1\". Hier is UART genummerd omdat we meerdere UART communicaties tegelijk kunnen hebben met verschillende sensoren/apparaten. Later in deze workshop gaan we de radio module ook via UART aanspreken. Microcontroller pin-map openen Klik op CTRL+SHIFT+P Typ: 'pin map' Klik op het resultaat Naast de pinmap van de microcontroller, moet je ook weten wat elke pin van de sensor doet. De pinmap van de sensor kan je in het diagram hieronder zien. Let op dat de groene kant van de sensor beneden zit. De pinmap van de SPS30 fijnstof sensor Hieronder staat een tabel met de verbinding van de microcontroller naar de sensor. Gebruik de pinmap van de microcontroller en de sensor om te begrijpen hoe ze met elkaar verbonden zijn. Mocht de sensor nog niet verbonden zijn met de microcontroller, doe dat dan nu. Sensor kapot!? Eigenlijk kan je bijna niks kapot maken tijdens het schrijven van code. Dit is de enige stap waar je extra goed moet opletten. Als je per ongeluk de stroomvoeding en de stroomgrond (de + en de -) door elkaar haalt gaat de sensor gegarandeerd kapot en kan je niet verder met de workshop. Microcontroller pin (GPxx) Sensor pin Omschrijving VSYS +5V/VDD De stroomvoeding voor de sensor GND GND Stroom grond UART1 TX (GP4) RX Data vanuit microcontroller naar de sensor UART1 RX (GP5) TX Data vanuit sensor naar de microcontroller Code schrijven De sensor is via draadjes verbonden met de microcontroller, maar nu moeten we code schrijven zodat de microcontroller begrijpt dat de SPS30 sensor verbonden zit via UART communicatie. Hiervoor moet je het volgende weten, dit staat ook eerder op deze pagina uitgelegd: We gebruiken UART nummer 1 UART TX (verzend) pin is GP4 UART RX (ontvang) pin is GP5 De sensor heet de SPS30 We moeten met een snelheid van 115200 bits per seconden data versturen/ontvangen 2 Open het workshop bestand genaamd: 5_sps30.py . Lees dit bestand even door en let op hoe de UART verbinding wordt opgezet. Net als bij Pin importeren we extra functionaliteit UART . Vervolgens maken we 2 pinnen aan, dit zijn de UART1 TX en RX pin. Deze pinnen gebruiken we weer om een UART object aan te maken. 1 2 3 4 5 6 7 8 9 10 from machine import UART , Pin from lib.sps30 import SPS30 tx_pin = Pin ( 4 ) rx_pin = Pin ( 5 ) verbinding = UART ( id = 1 , baudrate = 115200 , tx = tx_pin , rx = rx_pin ) sensor = SPS30 ( verbinding ) serienummer = sensor . serie_nummer () print ( serienummer ) Ik krijg geen reactie...? Het kan voorkomen dat je de code uitvoert en geen reactie krijg, dan zie je alleen het volgende: 1 2 3 >>> >>> In dit geval zal er ergens een communicatiefout zijn opgetreden. Dit kan gebeuren omdat werken met jumpers (draadjes) niet altijd even stabiel is. Probeer nog een aantal keer op \"Run\" te klikken. Als het daarna nog niet werkt, vraag dan een van de begeleiders om hulp. Parameter namen gebruiken Zoals je wellicht is opgevallen, bij het maken van het UART object zetten we de parameters niet op volgorde maar specificeren we welke parameter we een waarde willen geven. Bij het Pin voorbeeld zie je alleen 4 als parameter. Echter, als je met je muis over het woord Pin hangt dan zal je onwtikkelomgeving een popup laten zien met extra informatie, zoals de parameter namen. Deze informatie kan je ook zien als je over UART hangt met je muis. Omschrijving en parameter namen van het Pin object In eerste instantie ziet de omschrijving er complex uit, maar let vooral op de woorden tussen de haakjes en voor de dubbele punt : . De namen van de parameters van het Pin object zijn in volgorde: id , mode , pull en af . Als je niet specifiek de naam van de parameter opgeeft zoals led = Pin ( 25 , Pin . OUT ) dan wordt de volgorde in de omschrijving aangehouden. Dus de parameter met de naam id is in dit geval 25 en mode is Pin.OUT . Als je wel de naam van de parameters opgeeft, ziet dat er als volgt uit: led = Pin ( mode = Pin . OUT , id = 25 ) . Je hoeft dan ook de volgorde niet aan te houden. Vraag A: Klopt het serienummer Zoals je in de code ziet, we voeren een functie uit op het sensor object genaamd serie_nummer() . Achter de schermen gebruikt deze functie de UART verbinding om aan de SPS30 te vragen wat zijn serie nummer is. Het serienummer van de SPS30 staat ook op een label op de groene kant van de sensor. Komen deze serie nummers overeen? Oefening B: Zien wat er achter de schermen gebeurd? Wanneer het SPS30 object wordt gemaakt geef je 1 parameter mee, dat is de UART verbinding (zie regel 8). Echter, de bij het aanmaken van het SPS30 object kan je ook een tweede parameter meegeven dat een boolean is ( True of False ). Deze tweede parameter heeft de naam debug . Dit staat standaard uit, maar als je het aan zet zal de microcontroller meer informatie terugsturen naar je computer. Hierin zie je ook de data die de microcontroller stuurt en ontvangt via UART . 1 sensor = SPS30 ( verbinding , True ) Oefening C: Verder kijken Eerder heb je geleerd dat de ontwikkelomgeving suggesties en aanvullingen kan geven. Als je sensor . typt, zie je dan al interessante functies? Er zijn ook manieren om op slechts 1 kabel zowel data te versturen als ontvangen, dit heet \"half-duplex\" \u21a9 Dit is een van de standaard snelheden. Een andere bekende snelheid is: 9600 \u21a9","title":"Praten met de sensor"},{"location":"fijnstof/uart/#communicatie-met-de-sensor","text":"Op een manier moeten we data naar de sensor sturen en een reactie - zoals meetresultaat - kunnen ontvangen. Zoals je eerder - bij het hoofdstuk over het LED lampje - hebt geleerd kunnen we een aan of uit signaal versturen. Op deze manier zou je bijvoorbeeld morse code kunnen versturen, maar dat kan efficienter. Communicatie tussen de microcontroller en sensor Een betere manier dan morse om data te versturen via digitale signalen kan met UART . Hiermee kunnen we met twee kabels, die de microcontroller verbindt aan de sensor, data ontvangen( RX ) en versturen( TX ) 1 . Uiteindelijk komen de meeste manieren van digitale communicatie neer op aan en uit, 1 en 0 of hoog en lage spanningen. Een UART bericht kan je zien in het diagram hieronder. Om het UART protocol zelf te implementeren is vrij complex. Gelukkig heeft onze microcontroller al een aantal protocollen ingebouwd, waaronder UART . Het enige wat wij moeten doen is de sensor goed aansluiten met de kabeltjes en de microcontroller zo programmeren dat het UART gaat gebruiken. UART iets verder uitgelegd In het diagram hieroner kan je de stroom op een van de data kabels zien over een bepaalde tijd (op de horizontale as). Het hele bericht dat je ziet noemen we een \"frame\". Een frame heeft een begin en een einde. In dit geval is het begin de \"start bit \", dus een laag signaal voor een bepaalde tijd. Dit wordt gevolgd door 8 data bits en met twee stop bits. De stop bits indiceren het einde van de frame. De \"Parity bit \" is een simpele manier om te zien of er een fout is tijdens de communicatie. De parity bit geeft aan of er een even of oneven aantal 1'tjes in de frame zitten. Mocht er dan een frame ontvangen zijn en de parity- bit klopt niet, dan weten we dat er iets fout is gegaan tijdens het ontvangen. Hoge en lage spanningen vormen een bericht in UART","title":"Communicatie met de sensor"},{"location":"fijnstof/uart/#breadboard-aansluiting","text":"Let op! Het is handig om te weten hoe deze opstelling werkt, maar deze stappen hoef je niet te volgen als jouw sensor al is aangesloten Voor het aansluiten van de sensor aan de microcontroller gaan we gebruik maken van een breadboard met jumpers (kabeltjes). Met een breadboard kunnen we de pinnen van de microcontroller verbinden aan de pinnen van de sensor, zonder permanente aansluitingen te maken. Hiervoor moet je wel weten hoe een breadboard in elkaar zit. Een breadboard bestaat uit rijen (horizontaal) en kolommen (verticaal). Zoals het diagram hieronder laat zien is elke rij met elkaar verbonden. Hiermee kunnen we dus tot 5 kabels met elkaar verbinden per rij. De enige uitzondering hierop is de + en - kolom die verticaal met elkaar verbonden zijn. Tip De microcontroller past precies in het midden de breadboard waardoor je makkelijk de pinnen van de microcontroller kan verbinden met de sensor. De voor- en achterkant van een breadboard laat zien hoe de pinnen verbonden zijn met elkaar","title":"Breadboard aansluiting"},{"location":"fijnstof/uart/#sensor-aansluiting","text":"De microcontroller heeft UART ingebouwd waar we gebruik van kunnen maken. Deze UART zit verbonden op bepaalde pinnen. Als je de Pin-Map weer opened kan je deze herkennen door het (licht)paarse label waarin staat \"UART0\" of \"UART1\". Hier is UART genummerd omdat we meerdere UART communicaties tegelijk kunnen hebben met verschillende sensoren/apparaten. Later in deze workshop gaan we de radio module ook via UART aanspreken. Microcontroller pin-map openen Klik op CTRL+SHIFT+P Typ: 'pin map' Klik op het resultaat Naast de pinmap van de microcontroller, moet je ook weten wat elke pin van de sensor doet. De pinmap van de sensor kan je in het diagram hieronder zien. Let op dat de groene kant van de sensor beneden zit. De pinmap van de SPS30 fijnstof sensor Hieronder staat een tabel met de verbinding van de microcontroller naar de sensor. Gebruik de pinmap van de microcontroller en de sensor om te begrijpen hoe ze met elkaar verbonden zijn. Mocht de sensor nog niet verbonden zijn met de microcontroller, doe dat dan nu. Sensor kapot!? Eigenlijk kan je bijna niks kapot maken tijdens het schrijven van code. Dit is de enige stap waar je extra goed moet opletten. Als je per ongeluk de stroomvoeding en de stroomgrond (de + en de -) door elkaar haalt gaat de sensor gegarandeerd kapot en kan je niet verder met de workshop. Microcontroller pin (GPxx) Sensor pin Omschrijving VSYS +5V/VDD De stroomvoeding voor de sensor GND GND Stroom grond UART1 TX (GP4) RX Data vanuit microcontroller naar de sensor UART1 RX (GP5) TX Data vanuit sensor naar de microcontroller","title":"Sensor aansluiting"},{"location":"fijnstof/uart/#code-schrijven","text":"De sensor is via draadjes verbonden met de microcontroller, maar nu moeten we code schrijven zodat de microcontroller begrijpt dat de SPS30 sensor verbonden zit via UART communicatie. Hiervoor moet je het volgende weten, dit staat ook eerder op deze pagina uitgelegd: We gebruiken UART nummer 1 UART TX (verzend) pin is GP4 UART RX (ontvang) pin is GP5 De sensor heet de SPS30 We moeten met een snelheid van 115200 bits per seconden data versturen/ontvangen 2 Open het workshop bestand genaamd: 5_sps30.py . Lees dit bestand even door en let op hoe de UART verbinding wordt opgezet. Net als bij Pin importeren we extra functionaliteit UART . Vervolgens maken we 2 pinnen aan, dit zijn de UART1 TX en RX pin. Deze pinnen gebruiken we weer om een UART object aan te maken. 1 2 3 4 5 6 7 8 9 10 from machine import UART , Pin from lib.sps30 import SPS30 tx_pin = Pin ( 4 ) rx_pin = Pin ( 5 ) verbinding = UART ( id = 1 , baudrate = 115200 , tx = tx_pin , rx = rx_pin ) sensor = SPS30 ( verbinding ) serienummer = sensor . serie_nummer () print ( serienummer ) Ik krijg geen reactie...? Het kan voorkomen dat je de code uitvoert en geen reactie krijg, dan zie je alleen het volgende: 1 2 3 >>> >>> In dit geval zal er ergens een communicatiefout zijn opgetreden. Dit kan gebeuren omdat werken met jumpers (draadjes) niet altijd even stabiel is. Probeer nog een aantal keer op \"Run\" te klikken. Als het daarna nog niet werkt, vraag dan een van de begeleiders om hulp. Parameter namen gebruiken Zoals je wellicht is opgevallen, bij het maken van het UART object zetten we de parameters niet op volgorde maar specificeren we welke parameter we een waarde willen geven. Bij het Pin voorbeeld zie je alleen 4 als parameter. Echter, als je met je muis over het woord Pin hangt dan zal je onwtikkelomgeving een popup laten zien met extra informatie, zoals de parameter namen. Deze informatie kan je ook zien als je over UART hangt met je muis. Omschrijving en parameter namen van het Pin object In eerste instantie ziet de omschrijving er complex uit, maar let vooral op de woorden tussen de haakjes en voor de dubbele punt : . De namen van de parameters van het Pin object zijn in volgorde: id , mode , pull en af . Als je niet specifiek de naam van de parameter opgeeft zoals led = Pin ( 25 , Pin . OUT ) dan wordt de volgorde in de omschrijving aangehouden. Dus de parameter met de naam id is in dit geval 25 en mode is Pin.OUT . Als je wel de naam van de parameters opgeeft, ziet dat er als volgt uit: led = Pin ( mode = Pin . OUT , id = 25 ) . Je hoeft dan ook de volgorde niet aan te houden. Vraag A: Klopt het serienummer Zoals je in de code ziet, we voeren een functie uit op het sensor object genaamd serie_nummer() . Achter de schermen gebruikt deze functie de UART verbinding om aan de SPS30 te vragen wat zijn serie nummer is. Het serienummer van de SPS30 staat ook op een label op de groene kant van de sensor. Komen deze serie nummers overeen? Oefening B: Zien wat er achter de schermen gebeurd? Wanneer het SPS30 object wordt gemaakt geef je 1 parameter mee, dat is de UART verbinding (zie regel 8). Echter, de bij het aanmaken van het SPS30 object kan je ook een tweede parameter meegeven dat een boolean is ( True of False ). Deze tweede parameter heeft de naam debug . Dit staat standaard uit, maar als je het aan zet zal de microcontroller meer informatie terugsturen naar je computer. Hierin zie je ook de data die de microcontroller stuurt en ontvangt via UART . 1 sensor = SPS30 ( verbinding , True ) Oefening C: Verder kijken Eerder heb je geleerd dat de ontwikkelomgeving suggesties en aanvullingen kan geven. Als je sensor . typt, zie je dan al interessante functies? Er zijn ook manieren om op slechts 1 kabel zowel data te versturen als ontvangen, dit heet \"half-duplex\" \u21a9 Dit is een van de standaard snelheden. Een andere bekende snelheid is: 9600 \u21a9","title":"Code schrijven"},{"location":"fijnstof/while-loop/","text":"Herhalen van code In de vorige opdracht zagen we dat code van boven naar beneden uitgevoerd word. Echter, als iets meer dan \u00e9\u00e9n keer uitgevoerd moet worden is het niet handig om steeds die code te kopieren. Daarom kunnen we gebruik maken van \"while-loops\". De While-Loop Een while-loop (of while-statement) is een manier om een stuk code te laten herhalen zolang er aan een bepaalde voorwaarde wordt voldaan. Open het bestand 2_while_loop.py in je ontwikkelomgeving: 2_while_loop.py 1 2 3 4 x = 1 while x < 10 : print ( x ) x = x + 1 Variabelen gebruiken (net als bij wiskunde) We kunnen variabelen gebruiken om waarden bij te houden en veranderen. Bijvoorbeeld een getal op te laten tellen, of een stuk tekst bijhouden. 1 2 3 4 leeftijd = 22 print ( leeftijd ) # dit print \"22\" leeftijd = 30 print ( leeftijd ) # nu print het \"30\" Comments Omdat deze pagina ook toelichting geeft op de code, zijn de comments weggelaten. In jouw code zullen ze wel aanwezig zijn. Een while-loop begint altijd met het woord while gevolgd door een voorwaarde of vergelijking, zoals x < 10 en wordt afgesloten met een dubbele punt : . Het afsluiten op een dubbele punt geeft aan dat de volgende - ingresprongen - regels bij de while-loop horen. Het is in wijze een \"blok\" aan code dat bijn elkaar hoort. Omdat inspringen een belangrijk aspect is in deze programmeer taal, is je ontwikkelomgeving ingesteld om een kleur te geven aan elk ingesprongen niveau: Elk ingesprongen niveau krijgt een eigen kleur Uitvoeren van de code Met het tweede workshop bestand (2_while_loop.py) geopend, klik op de Run knop in de groene balk en observeer wat de microcontroller terugstuurt naar de computer. Uitkomst De microcontroller zal reageren met: Reactie van microcontroller 1 2 3 4 5 6 7 8 9 Vraag A: 'kleiner dan' en 'kleiner dan of gelijk aan' Waarom eindigt het getal bij 9 en niet 10? (Denk aan je wiskunde les) Oefening B: Het dubbele Hoe kan je de code zo aanpassen dat je de onderstaande reactie krijg: Uitkomst van aangepaste code 2 4 6 8 10 12 14 16 18 Antwoorden zien? Als je er echt niet aan uit komt of je er dreigt tijd te kort, dan kan je de map antwoorden openen en kijken naar het antwoord van de stap waar je nu op zit. Antwoorden!?!? Of bekijk alle antwoorden, het is tenslotte geen toets :)","title":"Herhalingen"},{"location":"fijnstof/while-loop/#herhalen-van-code","text":"In de vorige opdracht zagen we dat code van boven naar beneden uitgevoerd word. Echter, als iets meer dan \u00e9\u00e9n keer uitgevoerd moet worden is het niet handig om steeds die code te kopieren. Daarom kunnen we gebruik maken van \"while-loops\".","title":"Herhalen van code"},{"location":"fijnstof/while-loop/#de-while-loop","text":"Een while-loop (of while-statement) is een manier om een stuk code te laten herhalen zolang er aan een bepaalde voorwaarde wordt voldaan. Open het bestand 2_while_loop.py in je ontwikkelomgeving: 2_while_loop.py 1 2 3 4 x = 1 while x < 10 : print ( x ) x = x + 1 Variabelen gebruiken (net als bij wiskunde) We kunnen variabelen gebruiken om waarden bij te houden en veranderen. Bijvoorbeeld een getal op te laten tellen, of een stuk tekst bijhouden. 1 2 3 4 leeftijd = 22 print ( leeftijd ) # dit print \"22\" leeftijd = 30 print ( leeftijd ) # nu print het \"30\" Comments Omdat deze pagina ook toelichting geeft op de code, zijn de comments weggelaten. In jouw code zullen ze wel aanwezig zijn. Een while-loop begint altijd met het woord while gevolgd door een voorwaarde of vergelijking, zoals x < 10 en wordt afgesloten met een dubbele punt : . Het afsluiten op een dubbele punt geeft aan dat de volgende - ingresprongen - regels bij de while-loop horen. Het is in wijze een \"blok\" aan code dat bijn elkaar hoort. Omdat inspringen een belangrijk aspect is in deze programmeer taal, is je ontwikkelomgeving ingesteld om een kleur te geven aan elk ingesprongen niveau: Elk ingesprongen niveau krijgt een eigen kleur","title":"De While-Loop"},{"location":"fijnstof/while-loop/#uitvoeren-van-de-code","text":"Met het tweede workshop bestand (2_while_loop.py) geopend, klik op de Run knop in de groene balk en observeer wat de microcontroller terugstuurt naar de computer. Uitkomst De microcontroller zal reageren met: Reactie van microcontroller 1 2 3 4 5 6 7 8 9 Vraag A: 'kleiner dan' en 'kleiner dan of gelijk aan' Waarom eindigt het getal bij 9 en niet 10? (Denk aan je wiskunde les) Oefening B: Het dubbele Hoe kan je de code zo aanpassen dat je de onderstaande reactie krijg: Uitkomst van aangepaste code 2 4 6 8 10 12 14 16 18 Antwoorden zien? Als je er echt niet aan uit komt of je er dreigt tijd te kort, dan kan je de map antwoorden openen en kijken naar het antwoord van de stap waar je nu op zit. Antwoorden!?!? Of bekijk alle antwoorden, het is tenslotte geen toets :)","title":"Uitvoeren van de code"}]}